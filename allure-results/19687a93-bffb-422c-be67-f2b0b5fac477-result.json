{"name": "test_02_validate_all_dashboard_cards_are_clickable", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=140.0.7339.133)\nStacktrace:\n0   chromedriver                        0x0000000102653674 cxxbridge1$str$ptr + 2882776\n1   chromedriver                        0x000000010264b5a0 cxxbridge1$str$ptr + 2849796\n2   chromedriver                        0x00000001021750dc _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 73436\n3   chromedriver                        0x000000010215eaa8 chromedriver + 207528\n4   chromedriver                        0x0000000102181be8 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 125416\n5   chromedriver                        0x00000001021e46d0 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 529616\n6   chromedriver                        0x00000001021fd1cc _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 630732\n7   chromedriver                        0x00000001021b0130 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 315184\n8   chromedriver                        0x0000000102617ba4 cxxbridge1$str$ptr + 2638344\n9   chromedriver                        0x000000010261adbc cxxbridge1$str$ptr + 2651168\n10  chromedriver                        0x00000001025f8640 cxxbridge1$str$ptr + 2509988\n11  chromedriver                        0x000000010261b668 cxxbridge1$str$ptr + 2653388\n12  chromedriver                        0x00000001025e9ddc cxxbridge1$str$ptr + 2450496\n13  chromedriver                        0x000000010263aef0 cxxbridge1$str$ptr + 2782548\n14  chromedriver                        0x000000010263b070 cxxbridge1$str$ptr + 2782932\n15  chromedriver                        0x000000010264b1ec cxxbridge1$str$ptr + 2848848\n16  libsystem_pthread.dylib             0x0000000192d7fc0c _pthread_start + 136\n17  libsystem_pthread.dylib             0x0000000192d7ab80 thread_start + 8", "trace": "self = <tests.test_home.TestHome object at 0x1046b8850>\n\n    def test_02_validate_all_dashboard_cards_are_clickable(self):\n        \"\"\"Test that all 6 cards on home page are clickable after successful login and OTP verification\"\"\"\n        self.logger.info(\"==================================================\")\n        self.logger.info(\"STARTING TEST: test_02_validate_all_dashboard_cards_are_clickable\")\n        self.logger.info(\"==================================================\")\n        self.logger.info(\"STEP: Starting all cards clickability validation test\")\n    \n        try:\n            # Complete login and OTP flow\n            assert self.perform_complete_login_flow(), \"Failed to reach home page\"\n    \n            self.logger.info(\"STEP: Testing clickability of all 6 cards\")\n    \n            # Take screenshot before testing\n            self.take_failure_screenshot(\"home_page_before_cards_test\")\n    \n            # Test each card (1-6)\n            for card_number in range(1, 7):\n                self.logger.info(f\"STEP: Testing clickability of card {card_number}\")\n    \n                # Try to click the card\n                card_clicked = self.home_page.click_card(card_number)\n    \n                if card_clicked:\n                    self.logger.info(f\"STEP: Card {card_number} clicked successfully\")\n    \n                    # Wait for potential navigation\n                    time.sleep(3)\n    \n                    # Check if URL changed (indicating navigation)\n>                   current_url = self.driver.current_url\n\ntests/test_home.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:437: in current_url\n    return self.execute(Command.GET_CURRENT_URL)[\"value\"]\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104e44a00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...000192d7fc0c _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x0000000192d7ab80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=140.0.7339.133)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000102653674 cxxbridge1$str$ptr + 2882776\nE       1   chromedriver                        0x000000010264b5a0 cxxbridge1$str$ptr + 2849796\nE       2   chromedriver                        0x00000001021750dc _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 73436\nE       3   chromedriver                        0x000000010215eaa8 chromedriver + 207528\nE       4   chromedriver                        0x0000000102181be8 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 125416\nE       5   chromedriver                        0x00000001021e46d0 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 529616\nE       6   chromedriver                        0x00000001021fd1cc _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 630732\nE       7   chromedriver                        0x00000001021b0130 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 315184\nE       8   chromedriver                        0x0000000102617ba4 cxxbridge1$str$ptr + 2638344\nE       9   chromedriver                        0x000000010261adbc cxxbridge1$str$ptr + 2651168\nE       10  chromedriver                        0x00000001025f8640 cxxbridge1$str$ptr + 2509988\nE       11  chromedriver                        0x000000010261b668 cxxbridge1$str$ptr + 2653388\nE       12  chromedriver                        0x00000001025e9ddc cxxbridge1$str$ptr + 2450496\nE       13  chromedriver                        0x000000010263aef0 cxxbridge1$str$ptr + 2782548\nE       14  chromedriver                        0x000000010263b070 cxxbridge1$str$ptr + 2782932\nE       15  chromedriver                        0x000000010264b1ec cxxbridge1$str$ptr + 2848848\nE       16  libsystem_pthread.dylib             0x0000000192d7fc0c _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x0000000192d7ab80 thread_start + 8\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidSessionIdException"}, "description": "Test that all 6 cards on home page are clickable after successful login and OTP verification", "attachments": [{"name": "log", "source": "70bf84ac-5113-4c40-9de9-ff4bed458db0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "2a0520a3-39b4-4fcd-84f6-ce94950e87e9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "93b138da-f2ca-4798-9baa-93781444a03e-attachment.txt", "type": "text/plain"}], "start": 1757996386995, "stop": 1757996452194, "uuid": "8ed68568-e57c-4c4d-82aa-617db8db0e40", "historyId": "9123d770d434530e2428f6ccf2323afa", "testCaseId": "9123d770d434530e2428f6ccf2323afa", "fullName": "tests.test_home.TestHome#test_02_validate_all_dashboard_cards_are_clickable", "labels": [{"name": "feature", "value": "Home Page Navigation"}, {"name": "epic", "value": "UI Automation Test Suite"}, {"name": "story", "value": "Home Page Elements and Card Navigation"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_home"}, {"name": "subSuite", "value": "TestHome"}, {"name": "host", "value": "SHTLPMac015s-MacBook-Pro.local"}, {"name": "thread", "value": "15695-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_home"}]}