trigger:
  - main

schedules:
  - cron: "30 4 * * 1,3,5"   # 10:00 AM IST = 4:30 AM UTC
    displayName: "Scheduled Trigger: Mon/Wed/Fri 10:00 AM IST"
    branches:
      include:
        - main
    always: true

pool:
  vmImage: 'windows-latest'

variables:
  - name: ALLURE_VERSION
    value: '2.25.0'
  - name: system.debug
    value: false
  - name: RUNNING_IN_PIPELINE
    value: 'true'

steps:
- checkout: self
  fetchDepth: 1
  displayName: 'Checkout Code'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
    addToPath: true
  displayName: 'Setup Python'

- powershell: |
    Write-Host "Installing Python dependencies..."
    python -m pip install --upgrade pip
    python -m pip install -r requirements.txt
    python -m pip install allure-pytest pytest requests webdriver-manager
    Write-Host "Installed packages:"
    python -m pip list | Select-String -Pattern "(pytest|allure|selenium|webdriver)"
  displayName: 'Install Python Dependencies'

- powershell: |
    Write-Host "Installing Chrome browser..."
    # Chrome is already installed on Windows Azure agents
    # Check if Chrome is available
    $chromePath = Get-Command chrome -ErrorAction SilentlyContinue
    if ($chromePath) {
        Write-Host "Chrome already available at: $($chromePath.Source)"
        & chrome --version
    } else {
        Write-Host "Installing Chrome via Chocolatey..."
        choco install googlechrome -y
        Write-Host "Chrome installation completed"
    }
  displayName: 'Setup Chrome Browser'

- powershell: |
    Write-Host "Setting up test environment for Windows..."
    # Windows doesn't need virtual display setup
    # Set environment variables for pipeline
    $env:RUNNING_IN_PIPELINE = "true"
    $env:PYTEST_CURRENT_TEST = ""
    $env:PYTHONIOENCODING = "utf-8"
    $env:LANG = "en_US.UTF-8"
    
    # Set console output encoding to UTF-8
    [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
    [Console]::InputEncoding = [System.Text.Encoding]::UTF8
    
    Write-Host "Environment variables set for pipeline execution"
    Write-Host "UTF-8 encoding configured"
  displayName: 'Setup Test Environment'

- powershell: |
    Write-Host "Setting up test execution..."
    if (!(Test-Path "allure-results")) {
        New-Item -ItemType Directory -Name "allure-results"
    }
    
    # Set environment variables for pipeline mode
    $env:RUNNING_IN_PIPELINE = "true"
    $env:PYTEST_CURRENT_TEST = ""
    $env:PYTHONIOENCODING = "utf-8"
    $env:LANG = "en_US.UTF-8"
    
    Write-Host "Python version and environment:"
    python --version
    Write-Host "Working directory: $(Get-Location)"
    Write-Host "Environment variables:"
    Write-Host "RUNNING_IN_PIPELINE=$env:RUNNING_IN_PIPELINE"
    
    Write-Host "Checking Python imports..."
    python -c "import sys; print('Python Path:', sys.path[:3])"
    python -c "import pytest; print('Pytest version:', pytest.__version__)"
    
    try {
        python -c "import selenium; print('Selenium version:', selenium.__version__)"
    } catch {
        Write-Host "Selenium import failed, but continuing..."
    }
    
    Write-Host "Checking test discovery..."
    $discoverOutput = python -m pytest --collect-only tests/ 2>&1
    Write-Host "Discovery output:"
    Write-Host $discoverOutput
    
    # Count discovered tests
    $testCount = ($discoverOutput | Select-String "test session starts" | ForEach-Object { $_.Line -replace '.*(\d+) items.*', '$1' })
    if ($testCount) {
        Write-Host "Discovered $testCount tests"
    } else {
        Write-Host "Test discovery may have failed"
    }
    
    Write-Host "=========================================="
    Write-Host "RUNNING TESTS WITH DETAILED OUTPUT"
    Write-Host "=========================================="
    
    # Run tests with maximum verbosity and error details
    python -m pytest tests/ `
        --alluredir=allure-results `
        --clean-alluredir `
        -v `
        -s `
        --tb=long `
        --maxfail=3 `
        --capture=no `
        --log-cli-level=DEBUG `
        --log-cli-format='%(levelname)s:%(name)s:%(message)s' `
        --disable-warnings
    
    $PYTEST_EXIT_CODE = $LASTEXITCODE
    Write-Host "=========================================="
    Write-Host "Pytest completed with exit code: $PYTEST_EXIT_CODE"
    Write-Host "=========================================="
    
    Write-Host "Checking allure-results directory..."
    if (Test-Path "allure-results") {
        Write-Host "Contents of allure-results:"
        $allItems = Get-ChildItem "allure-results" -Recurse
        Write-Host "Total files: $($allItems.Count)"
        $allItems | ForEach-Object { Write-Host "  $($_.Name) ($($_.Length) bytes)" }
        
        $jsonFiles = Get-ChildItem "allure-results" -Filter "*.json"
        $JSON_COUNT = $jsonFiles.Count
        Write-Host "JSON result files: $JSON_COUNT"
        
        if ($JSON_COUNT -eq 0) {
            Write-Host "WARNING: No Allure result files generated!"
            Write-Host "Tests may have failed during setup/teardown phase"
            Write-Host "Creating diagnostic test result..."
            
            $diagnosticResult = @{
                uuid = "diagnostic-result-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
                name = "Pipeline Diagnostic Test"
                fullName = "pipeline.diagnostic.test"
                status = "failed"
                statusDetails = @{
                    message = "No test results generated - likely WebDriver or setup failure"
                    trace = "Exit code: $PYTEST_EXIT_CODE. Check logs above for setup errors."
                }
                stage = "finished"
                start = [DateTimeOffset]::Now.ToUnixTimeMilliseconds() - 60000
                stop = [DateTimeOffset]::Now.ToUnixTimeMilliseconds()
                labels = @(
                    @{ name = "suite"; value = "Pipeline Diagnostics" },
                    @{ name = "framework"; value = "pytest" },
                    @{ name = "exitCode"; value = "$PYTEST_EXIT_CODE" }
                )
            }
            $diagnosticResult | ConvertTo-Json -Depth 10 | Out-File -FilePath "allure-results/diagnostic-result.json" -Encoding UTF8
            Write-Host "Diagnostic result file created"
        } else {
            Write-Host "SUCCESS: $JSON_COUNT Allure result files found!"
        }
    } else {
        Write-Host "ERROR: allure-results directory not found!"
        New-Item -ItemType Directory -Name "allure-results" -Force
        Write-Host "Created allure-results directory"
    }
  displayName: 'Run Pytest with Allure'
  continueOnError: true

- powershell: |
    Write-Host "Downloading Allure..."
    $AllureUrl = "https://github.com/allure-framework/allure2/releases/download/$(ALLURE_VERSION)/allure-$(ALLURE_VERSION).zip"
    Invoke-WebRequest -Uri $AllureUrl -OutFile allure.zip
    Expand-Archive -Path allure.zip -DestinationPath .
    $env:PATH += ";$(Get-Location)\allure-$(ALLURE_VERSION)\bin"
    Write-Host "Generating Allure Report to TestReport..."
    allure generate allure-results --clean -o TestReport
  displayName: 'Generate Allure Report'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'TestReport'
    artifact: 'TestReport'
    publishLocation: 'pipeline'
  displayName: 'Publish TestReport Artifact'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'AzureBlobConnection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Uploading TestReport to $web static site..."
      az storage blob upload-batch \
        --account-name $AZURE_STORAGE_ACCOUNT \
        --account-key $AZURE_STORAGE_KEY \
        --source TestReport \
        --destination '$web' \
        --overwrite
  displayName: 'Upload TestReport to Azure Static Website'
  env:
    AZURE_STORAGE_ACCOUNT: $(AZURE_STORAGE_ACCOUNT)
    AZURE_STORAGE_KEY: $(AZURE_STORAGE_KEY)