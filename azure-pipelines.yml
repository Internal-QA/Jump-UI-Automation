trigger:
  - main

schedules:
  - cron: "30 4 * * 1,3,5"   # 10:00 AM IST = 4:30 AM UTC
    displayName: "Scheduled Trigger: Mon/Wed/Fri 10:00 AM IST"
    branches:
      include:
        - main
    always: true

pool:
  vmImage: 'windows-latest'

variables:
  - group: EmailSecretsGroup
  - name: ALLURE_VERSION
    value: '2.25.0'
  - name: system.debug
    value: false
  - name: RUNNING_IN_PIPELINE
    value: 'true'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
  displayName: 'Setup Python'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pip install allure-pytest pytest requests
    python -m pip install -r requirements.txt
    python -m pip install allure-pytest pytest requests
  displayName: 'Install Dependencies'

- script: |
    mkdir allure-results
    python -m pytest tests/ --alluredir=allure-results
  displayName: 'Run Pytest with Allure'
  continueOnError: true

- script: |
    curl -o allure.zip -L https://github.com/allure-framework/allure2/releases/download/2.25.0/allure-2.25.0.zip
    powershell Expand-Archive -Path allure.zip -DestinationPath .
    allure-2.25.0\bin\allure generate allure-results --clean -o allure-report
  displayName: 'Download Allure and Generate Report'
    
- powershell: |
    Write-Host "Downloading Allure..."
    $AllureUrl = "https://github.com/allure-framework/allure2/releases/download/$(ALLURE_VERSION)/allure-$(ALLURE_VERSION).zip"
    Invoke-WebRequest -Uri $AllureUrl -OutFile allure.zip
    Expand-Archive -Path allure.zip -DestinationPath .
    $env:PATH += ";$(Get-Location)\allure-$(ALLURE_VERSION)\bin"
    
    Write-Host "Generating Allure Report to TestReport..."
    allure generate allure-results --clean -o TestReport
  displayName: 'Generate Allure Report'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'allure-report'
    artifact: 'AllureReport'
    publishLocation: 'pipeline'
  displayName: 'Publish Report'

- powershell: |
    $ErrorActionPreference = "Stop"
    
    try {
        $smtp = New-Object Net.Mail.SmtpClient("$(SMTP_SERVER)", "$(SMTP_PORT)")
        $smtp.EnableSsl = $true
        $smtp.Credentials = New-Object Net.NetworkCredential("$(EMAIL_USERNAME)", "$(EMAIL_PASSWORD)")
        
        $msg = New-Object Net.Mail.MailMessage
        $msg.From = "$(EMAIL_FROM)"
        $msg.To.Add("$(EMAIL_TO)")
        $msg.Subject = "Test Report - Build $(Build.BuildNumber)"
        $msg.Body = "Test automation report is attached. Please extract and open index.html"
        
        if (Test-Path "test-reports.zip") {
            $att = New-Object Net.Mail.Attachment("test-reports.zip")
            $msg.Attachments.Add($att)
        }
        
        $smtp.Send($msg)
        Write-Host "Email sent successfully"
    }
    catch {
        Write-Error "Failed to send email: $_"
        throw
    }
    finally {
        if ($att) { $att.Dispose() }
        if ($msg) { $msg.Dispose() }
        if ($smtp) { $smtp.Dispose() }
    }
  displayName: 'Send Email'
  env:
    EMAIL_PASSWORD: $(EMAIL_PASSWORD)

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'TestReport'
    artifact: 'TestReport'
    publishLocation: 'pipeline'
  displayName: 'Publish TestReport Artifact'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'AzureBlobConnection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Uploading TestReport to $web static site..."
      az storage blob upload-batch \
        --account-name $AZURE_STORAGE_ACCOUNT \
        --account-key $AZURE_STORAGE_KEY \
        --source TestReport \
        --destination '$web' \
        --overwrite
  displayName: 'Upload TestReport to Azure Static Website'
  env:
    AZURE_STORAGE_ACCOUNT: $(AZURE_STORAGE_ACCOUNT)
    AZURE_STORAGE_KEY: $(AZURE_STORAGE_KEY)